#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChannelAdvisor.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ChannelAdvisor")]
	public partial class ChannelAdvisorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertVendor(Vendor instance);
    partial void UpdateVendor(Vendor instance);
    partial void DeleteVendor(Vendor instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertSpecifiedSKUs(SpecifiedSKUs instance);
    partial void UpdateSpecifiedSKUs(SpecifiedSKUs instance);
    partial void DeleteSpecifiedSKUs(SpecifiedSKUs instance);
    #endregion
		
		public ChannelAdvisorDataContext() : 
				base(global::ChannelAdvisor.Properties.Settings.Default.ChannelAdvisorConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelAdvisorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelAdvisorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelAdvisorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelAdvisorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Vendor> Vendors
		{
			get
			{
				return this.GetTable<Vendor>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<SpecifiedSKUs> SpecifiedSKUs
		{
			get
			{
				return this.GetTable<SpecifiedSKUs>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vendors")]
	public partial class Vendor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Vendor1;
		
		private System.Nullable<bool> _IsDynamic;
		
		private string _Folder;
		
		private string _FileArchive;
		
		private bool _SetOutOfStockIfNotPresented;
		
		private string _SKUPrefix;
		
		private System.Nullable<int> _OutOfStockThreshold;
		
		private System.Nullable<int> _OutOfStockQuantity;
		
		private string _Label;
		
		private EntitySet<SpecifiedSKUs> _SpecifiedSKUs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVendor1Changing(string value);
    partial void OnVendor1Changed();
    partial void OnIsDynamicChanging(System.Nullable<bool> value);
    partial void OnIsDynamicChanged();
    partial void OnFolderChanging(string value);
    partial void OnFolderChanged();
    partial void OnFileArchiveChanging(string value);
    partial void OnFileArchiveChanged();
    partial void OnSetOutOfStockIfNotPresentedChanging(bool value);
    partial void OnSetOutOfStockIfNotPresentedChanged();
    partial void OnSKUPrefixChanging(string value);
    partial void OnSKUPrefixChanged();
    partial void OnOutOfStockThresholdChanging(System.Nullable<int> value);
    partial void OnOutOfStockThresholdChanged();
    partial void OnOutOfStockQuantityChanging(System.Nullable<int> value);
    partial void OnOutOfStockQuantityChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    #endregion
		
		public Vendor()
		{
			this._SpecifiedSKUs = new EntitySet<SpecifiedSKUs>(new Action<SpecifiedSKUs>(this.attach_SpecifiedSKUs), new Action<SpecifiedSKUs>(this.detach_SpecifiedSKUs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Vendor", Storage="_Vendor1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Vendor1
		{
			get
			{
				return this._Vendor1;
			}
			set
			{
				if ((this._Vendor1 != value))
				{
					this.OnVendor1Changing(value);
					this.SendPropertyChanging();
					this._Vendor1 = value;
					this.SendPropertyChanged("Vendor1");
					this.OnVendor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDynamic", DbType="Bit")]
		public System.Nullable<bool> IsDynamic
		{
			get
			{
				return this._IsDynamic;
			}
			set
			{
				if ((this._IsDynamic != value))
				{
					this.OnIsDynamicChanging(value);
					this.SendPropertyChanging();
					this._IsDynamic = value;
					this.SendPropertyChanged("IsDynamic");
					this.OnIsDynamicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Folder", DbType="VarChar(300)")]
		public string Folder
		{
			get
			{
				return this._Folder;
			}
			set
			{
				if ((this._Folder != value))
				{
					this.OnFolderChanging(value);
					this.SendPropertyChanging();
					this._Folder = value;
					this.SendPropertyChanged("Folder");
					this.OnFolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileArchive", DbType="VarChar(300)")]
		public string FileArchive
		{
			get
			{
				return this._FileArchive;
			}
			set
			{
				if ((this._FileArchive != value))
				{
					this.OnFileArchiveChanging(value);
					this.SendPropertyChanging();
					this._FileArchive = value;
					this.SendPropertyChanged("FileArchive");
					this.OnFileArchiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetOutOfStockIfNotPresented", DbType="Bit NOT NULL")]
		public bool SetOutOfStockIfNotPresented
		{
			get
			{
				return this._SetOutOfStockIfNotPresented;
			}
			set
			{
				if ((this._SetOutOfStockIfNotPresented != value))
				{
					this.OnSetOutOfStockIfNotPresentedChanging(value);
					this.SendPropertyChanging();
					this._SetOutOfStockIfNotPresented = value;
					this.SendPropertyChanged("SetOutOfStockIfNotPresented");
					this.OnSetOutOfStockIfNotPresentedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SKUPrefix", DbType="NVarChar(10)")]
		public string SKUPrefix
		{
			get
			{
				return this._SKUPrefix;
			}
			set
			{
				if ((this._SKUPrefix != value))
				{
					this.OnSKUPrefixChanging(value);
					this.SendPropertyChanging();
					this._SKUPrefix = value;
					this.SendPropertyChanged("SKUPrefix");
					this.OnSKUPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutOfStockThreshold", DbType="Int")]
		public System.Nullable<int> OutOfStockThreshold
		{
			get
			{
				return this._OutOfStockThreshold;
			}
			set
			{
				if ((this._OutOfStockThreshold != value))
				{
					this.OnOutOfStockThresholdChanging(value);
					this.SendPropertyChanging();
					this._OutOfStockThreshold = value;
					this.SendPropertyChanged("OutOfStockThreshold");
					this.OnOutOfStockThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutOfStockQuantity", DbType="Int")]
		public System.Nullable<int> OutOfStockQuantity
		{
			get
			{
				return this._OutOfStockQuantity;
			}
			set
			{
				if ((this._OutOfStockQuantity != value))
				{
					this.OnOutOfStockQuantityChanging(value);
					this.SendPropertyChanging();
					this._OutOfStockQuantity = value;
					this.SendPropertyChanged("OutOfStockQuantity");
					this.OnOutOfStockQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(50)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_SpecifiedSKUs", Storage="_SpecifiedSKUs", ThisKey="ID", OtherKey="VendorId")]
		public EntitySet<SpecifiedSKUs> SpecifiedSKUs
		{
			get
			{
				return this._SpecifiedSKUs;
			}
			set
			{
				this._SpecifiedSKUs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecifiedSKUs(SpecifiedSKUs entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = this;
		}
		
		private void detach_SpecifiedSKUs(SpecifiedSKUs entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profiles")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Profile1;
		
		private string _ProfileAPIKey;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProfile1Changing(string value);
    partial void OnProfile1Changed();
    partial void OnProfileAPIKeyChanging(string value);
    partial void OnProfileAPIKeyChanged();
    #endregion
		
		public Profile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Profile", Storage="_Profile1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Profile1
		{
			get
			{
				return this._Profile1;
			}
			set
			{
				if ((this._Profile1 != value))
				{
					this.OnProfile1Changing(value);
					this.SendPropertyChanging();
					this._Profile1 = value;
					this.SendPropertyChanged("Profile1");
					this.OnProfile1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAPIKey", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProfileAPIKey
		{
			get
			{
				return this._ProfileAPIKey;
			}
			set
			{
				if ((this._ProfileAPIKey != value))
				{
					this.OnProfileAPIKeyChanging(value);
					this.SendPropertyChanging();
					this._ProfileAPIKey = value;
					this.SendPropertyChanged("ProfileAPIKey");
					this.OnProfileAPIKeyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecifiedSKUs")]
	public partial class SpecifiedSKUs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _VendorId;
		
		private string _SKU;
		
		private int _Quantity;
		
		private EntityRef<Vendor> _Vendor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVendorIdChanging(int value);
    partial void OnVendorIdChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public SpecifiedSKUs()
		{
			this._Vendor = default(EntityRef<Vendor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int NOT NULL")]
		public int VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					if (this._Vendor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SKU", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_SpecifiedSKUs", Storage="_Vendor", ThisKey="VendorId", OtherKey="ID", IsForeignKey=true)]
		public Vendor Vendor
		{
			get
			{
				return this._Vendor.Entity;
			}
			set
			{
				Vendor previousValue = this._Vendor.Entity;
				if (((previousValue != value) 
							|| (this._Vendor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vendor.Entity = null;
						previousValue.SpecifiedSKUs.Remove(this);
					}
					this._Vendor.Entity = value;
					if ((value != null))
					{
						value.SpecifiedSKUs.Add(this);
						this._VendorId = value.ID;
					}
					else
					{
						this._VendorId = default(int);
					}
					this.SendPropertyChanged("Vendor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
